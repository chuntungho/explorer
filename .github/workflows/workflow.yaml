name: Build Explorer

on:
  push:
    branches: [ master ]
    paths:
      - 'build.gradle'
      - 'src/**'
      - '.github/workflows/workflow.yaml'
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # https://github.com/marketplace/actions/github-action-for-graalvm
      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17' # for the latest JDK 17
          distribution: 'graalvm-community' # New 'distribution' option
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'
          components: 'native-image'
          cache: 'gradle'

      - name: Build image with Gradle
        run: |
          gradle bootBuildImage
          docker save explorer | gzip > explorer.tar.gz

      - name: Upload image file
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: explorer-image
          path: explorer.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build

    steps:
      - uses: actions/checkout@v4

      - name: Download image file
        uses: actions/download-artifact@v4
        with:
          name: explorer-image
          # single artifact content will be extracted into path
          path: dist

      - name: Upload file to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.SERVER_HOST }}
          port: ${{ vars.SERVER_PORT }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          # note that source structure will be kept in target folder
          # i.e.: `/tmp/dist/explorer.tar.gz`
          source: "dist/explorer.tar.gz"
          target: /tmp

      - name: Deploy in remote server
        uses: appleboy/ssh-action@v1.0.2
        with:
          host: ${{ vars.SERVER_HOST }}
          port: ${{ vars.SERVER_PORT }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          script_stop: true
          script: |
            echo "$IMAGE_FILE $IMAGE_NAME $SERVICE_NAME"
            docker load < /tmp/dist/explorer.tar.gz
            cd /opt/proxy
            docker compose up -d
